import gradio as gr
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
plt.style.use('dark_background')
plt.rcParams['figure.facecolor'] = '#0E0E0E'
plt.rcParams['axes.facecolor'] = '#1a1a1a'
plt.rcParams['axes.edgecolor'] = '#2E2E2E'
plt.rcParams['grid.color'] = '#333333'
plt.rcParams['text.color'] = '#e6e6e6'
plt.rcParams['axes.labelcolor'] = '#e6e6e6'
plt.rcParams['xtick.color'] = '#e6e6e6'
plt.rcParams['ytick.color'] = '#e6e6e6'

# =========================
# –ë—Ä–µ–Ω–¥–∏–Ω–≥ Ultima
# =========================
ULTIMA_GOLD = "#F9B233"
ULTIMA_DARK = "#0E0E0E"
ULTIMA_GRAY = "#2E2E2E"
ULTIMA_SUCCESS = "#3bd16f"
ULTIMA_WARNING = "#ffcf3a"
ULTIMA_ERROR = "#ff5f73"
ULTIMA_INFO = "#5ab0ff"

ENHANCED_HEADER_HTML = f"""
<div style="display:flex;align-items:center;gap:20px;margin-bottom:12px;padding:16px;background:linear-gradient(135deg,{ULTIMA_DARK},{ULTIMA_GRAY});border-radius:16px">
  <img src="https://cdn-uploads.huggingface.co/production/uploads/68a5d644d41e00d772823934/bmu2UTnqh39vYO0wRV718.png" style="width:64px;height:64px"/> 
  <div style="flex:1">
    <div style="font-size:32px;font-weight:800;color:{ULTIMA_GOLD};line-height:1.2;margin-bottom:4px">
      üöÄ ULTIMA ‚Äî Advanced LTV Analytics
    </div>
    <div style="color:#aaa;font-size:14px">
      –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è unit-—ç–∫–æ–Ω–æ–º–∏–∫–∞ ‚Ä¢ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    </div>
  </div>
  <div style="text-align:right;color:#666;font-size:12px">
    v2.0 Enhanced<br>
    {datetime.now().strftime('%d.%m.%Y %H:%M')}
  </div>
</div>
"""

ENHANCED_KPI_CSS = f"""
<style>
.kpi-grid {{
  display:grid;
  grid-template-columns: repeat(auto-fit, minmax(160px,1fr));
  gap:16px; margin:12px 0;
}}
.kpi-card {{
  background:linear-gradient(135deg,{ULTIMA_DARK},{ULTIMA_GRAY});
  border:2px solid {ULTIMA_GRAY};
  border-radius:16px; padding:20px; text-align:center;
  transition: all 0.3s ease; position: relative; overflow: hidden;
  color:#fff;
}}
.kpi-card::before {{
  content: ''; position: absolute; top: 0; left: 0; right: 0; height: 4px;
  background: var(--accent-color, {ULTIMA_GOLD});
}}
.kpi-label {{ color:#fff !important; font-size:13px; font-weight:500; margin-bottom:8px; }}
.kpi-value {{ color:#fff !important; font-size:24px; font-weight:800; margin:8px 0; }}
.kpi-change {{ color:#fff !important; font-size:11px; opacity:0.8; margin-top:4px; }}
.kpi-good    {{ --accent-color: {ULTIMA_SUCCESS}; }}
.kpi-warn    {{ --accent-color: {ULTIMA_WARNING}; }}
.kpi-bad     {{ --accent-color: {ULTIMA_ERROR}; }}
.kpi-neutral {{ --accent-color: {ULTIMA_INFO}; }}

.insights-panel {{
  background:{ULTIMA_DARK}; border:1px solid {ULTIMA_GRAY}; border-radius:12px;
  padding:16px; margin:12px 0;
}}
.insights-panel h4 {{
  color:#fff !important;
  font-weight:700;
}}
.insight-item {{ 
  display:flex; align-items:center; gap:12px; padding:8px 0;
  border-bottom:1px solid #333;
}}
.insight-item:last-child {{ border-bottom:none; }}
.insight-icon {{ font-size:20px; }}
.insight-text {{ flex:1; font-size:14px; line-height:1.4; color: #fff !important; }}

.warning-panel {{
  color: #fff !important;
  background: #2a2a1a;
  padding: 12px;
  border-radius: 8px;
  margin: 8px 0;
}}
.warning-panel h5 {{
  color: #fff !important;
  font-weight: 700;
}}
.warning-panel ul {{
  color: #fff !important;
}}
.warning-panel li {{
  color: #fff !important;
}}
</style>
"""

# =========================
# –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞—Å—á–µ—Ç–æ–≤
# =========================
class EnhancedLTVModel:
    def __init__(self):
        self.industry_benchmarks = {
            "SaaS": {"ltv_cac_min": 3.0, "payback_max": 12, "churn_typical": 5},
            "E-commerce": {"ltv_cac_min": 2.5, "payback_max": 6, "churn_typical": 15},
            "Marketplace": {"ltv_cac_min": 2.0, "payback_max": 8, "churn_typical": 12},
            "Fintech": {"ltv_cac_min": 4.0, "payback_max": 18, "churn_typical": 8},
            "–£—Å–ª—É–≥–∏ (—Å–∞–ª–æ–Ω—ã, —Ñ–∏—Ç–Ω–µ—Å, –æ–±—É—á–µ–Ω–∏–µ)": {"ltv_cac_min": 2.0, "payback_max": 9, "churn_typical": 20,},
        }
    
    def validate_inputs(self, params):
        warnings = []
        errors = []
        if params['avg_check'] <= 0:
            errors.append("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        if params['cac'] <= 0:
            errors.append("CAC –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        if params['monthly_churn_pct'] >= 50:
            warnings.append("‚ö†Ô∏è –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ—Ç—Ç–æ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        if params['margin_pct'] < 20:
            warnings.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ LTV")
        if params['avg_check'] < params['cac']:
            warnings.append("‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –º–µ–Ω—å—à–µ CAC - –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º")
        return warnings, errors

    def calculate_scenarios(self, base_params):
        scenarios = {}
        multipliers = {
            "–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": {"churn": 1.5, "margin": 0.8, "check": 0.9},
            "–ë–∞–∑–æ–≤—ã–π": {"churn": 1.0, "margin": 1.0, "check": 1.0},
            "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": {"churn": 0.7, "margin": 1.2, "check": 1.1}
        }
        for scenario_name, mult in multipliers.items():
            params = base_params.copy()
            params['monthly_churn_pct'] *= mult['churn']
            params['margin_pct'] *= mult['margin']
            params['avg_check'] *= mult['check']
            ltv_data = self.compute_enhanced_ltv(params)
            scenarios[scenario_name] = ltv_data
        return scenarios

    def compute_enhanced_ltv(self, params):
        monthly_revenue = (params['avg_check'] * params['purchases_per_year']) / 12.0
        monthly_margin = monthly_revenue * (params['margin_pct'] / 100.0)
        survival_rate = 1.0 - params['monthly_churn_pct'] / 100.0
        monthly_discount = 1.0 / ((1.0 + params['discount_rate_pct'] / 100.0) ** (1.0 / 12.0))
        months = np.arange(1, params['horizon_months'] + 1)
        survival_curve = survival_rate ** (months - 1)
        discount_curve = monthly_discount ** months
        seasonality = 1 + 0.05 * np.sin(2 * np.pi * months / 12)
        monthly_cf = monthly_margin * seasonality * survival_curve * discount_curve
        cumulative_cf = np.cumsum(monthly_cf)
        ltv = float(np.sum(monthly_cf))
        ltv_cac = (ltv / params['cac']) if params['cac'] > 0 else 0
        roi = ((ltv - params['cac']) / params['cac']) if params['cac'] > 0 else 0
        payback_month = None
        if np.any(cumulative_cf >= params['cac']):
            payback_month = int(months[cumulative_cf >= params['cac']][0])
        customer_lifetime = 1 / (params['monthly_churn_pct'] / 100) if params['monthly_churn_pct'] > 0 else np.inf
        monthly_retention = (1 - params['monthly_churn_pct'] / 100) * 100
        annual_retention = ((1 - params['monthly_churn_pct'] / 100) ** 12) * 100
        confidence_score = min(100, max(0, (ltv_cac - 1) * 25)) if ltv_cac > 0 else 0
        return {
            'ltv': ltv, 'ltv_cac': ltv_cac, 'roi': roi,
            'payback_month': payback_month, 'customer_lifetime': customer_lifetime,
            'monthly_retention': monthly_retention, 'annual_retention': annual_retention,
            'confidence_score': confidence_score,
            'monthly_cf': monthly_cf, 'cumulative_cf': cumulative_cf,
            'months': months, 'survival_curve': survival_curve
        }

    def generate_insights(self, ltv_data, params, industry="SaaS"):
        insights = []
        benchmark = self.industry_benchmarks.get(industry, self.industry_benchmarks["SaaS"])
        if ltv_data['ltv_cac'] < benchmark['ltv_cac_min']:
            insights.append({
                "icon": "‚ö†Ô∏è", "type": "warning",
                "text": f"LTV/CAC –Ω–∏–∂–µ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ ({benchmark['ltv_cac_min']}). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å LTV –∏–ª–∏ —Å–Ω–∏–∑–∏—Ç—å CAC."
            })
        else:
            insights.append({
                "icon": "‚úÖ", "type": "success", 
                "text": f"LTV/CAC —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ({ltv_data['ltv_cac']:.1f})."
            })
        if ltv_data['payback_month'] and ltv_data['payback_month'] <= benchmark['payback_max']:
            insights.append({
                "icon": "üöÄ", "type": "success",
                "text": f"–û—Ç–ª–∏—á–Ω—ã–π payback –ø–µ—Ä–∏–æ–¥ ({ltv_data['payback_month']} –º–µ—Å.) - –±—ã—Å—Ç—Ä–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å."
            })
        elif ltv_data['payback_month']:
            insights.append({
                "icon": "‚è≥", "type": "warning",
                "text": f"Payback –ø–µ—Ä–∏–æ–¥ ({ltv_data['payback_month']} –º–µ—Å.) –≤—ã—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ ({benchmark['payback_max']} –º–µ—Å.)."
            })
        if params['monthly_churn_pct'] > benchmark['churn_typical'] * 1.5:
            insights.append({
                "icon": "üìâ", "type": "error",
                "text": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π –æ—Ç—Ç–æ–∫ ({params['monthly_churn_pct']:.1f}% –≤ –º–µ—Å—è—Ü). –°—Ä–æ—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å retention."
            })
        if ltv_data['ltv_cac'] < 3:
            if params['margin_pct'] < 30:
                insights.append({
                    "icon": "üí°", "type": "info",
                    "text": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∞–ø—Å–µ–π–ª –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç."
                })
            if params['monthly_churn_pct'] > 10:
                insights.append({
                    "icon": "üí°", "type": "info", 
                    "text": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞."
                })
        return insights

model = EnhancedLTVModel()

def create_scenarios_chart(scenarios):
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = {"–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": "#ff5f73", "–ë–∞–∑–æ–≤—ã–π": "#5ab0ff", "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": "#3bd16f"}
    for scenario_name, data in scenarios.items():
        ax.plot(data['months'], data['cumulative_cf'], 
               label=f"CF {scenario_name}", color=colors[scenario_name], linewidth=3)
    ax.axhline(y=15000, color="#ffcf3a", linestyle="--", linewidth=2, label="CAC")
    ax.set_xlabel("–ú–µ—Å—è—Ü")
    ax.set_ylabel("–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π CF (‚ÇΩ)")
    ax.set_title("üìä –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Cash Flow –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º", fontsize=14, pad=20)
    ax.legend()
    ax.grid(True, alpha=0.3)
    plt.tight_layout()
    return fig

def create_survival_chart(scenarios):
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = {"–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": "#ff5f73", "–ë–∞–∑–æ–≤—ã–π": "#5ab0ff", "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π": "#3bd16f"}
    for scenario_name, data in scenarios.items():
        ax.plot(data['months'], data['survival_curve'] * 100, 
               label=f"–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å {scenario_name}", color=colors[scenario_name], linewidth=3)
        ax.fill_between(data['months'], data['survival_curve'] * 100, alpha=0.2, color=colors[scenario_name])
    ax.set_xlabel("–ú–µ—Å—è—Ü")
    ax.set_ylabel("% –∫–ª–∏–µ–Ω—Ç–æ–≤")
    ax.set_title("üìà –ö—Ä–∏–≤—ã–µ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", fontsize=14, pad=20)
    ax.set_ylim(0, 100)
    ax.legend()
    ax.grid(True, alpha=0.3)
    plt.tight_layout()
    return fig

def create_sensitivity_chart(base_params):
    fig, ax = plt.subplots(figsize=(12, 6))
    params_to_test = ['avg_check', 'margin_pct', 'monthly_churn_pct', 'purchases_per_year']
    param_names = ['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–ú–∞—Ä–∂–∞ %', '–û—Ç—Ç–æ–∫ %', '–ü–æ–∫—É–ø–æ–∫/–≥–æ–¥']
    variations = np.linspace(0.5, 1.5, 11)
    colors = ['#5ab0ff', '#3bd16f', '#ff5f73', '#ffcf3a']
    for i, param in enumerate(params_to_test):
        ltv_cac_values = []
        for mult in variations:
            test_params = base_params.copy()
            test_params[param] *= mult
            ltv_data = model.compute_enhanced_ltv(test_params)
            ltv_cac_values.append(ltv_data['ltv_cac'])
        ax.plot(variations * 100, ltv_cac_values, 
               label=param_names[i], color=colors[i], linewidth=3, marker='o', markersize=4)
    ax.axhline(y=3, color="#ffcf3a", linestyle="--", linewidth=2, alpha=0.8, label="–¶–µ–ª–µ–≤–æ–π LTV/CAC = 3.0")
    ax.axhline(y=1, color="#ff5f73", linestyle=":", linewidth=2, alpha=0.8, label="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å = 1.0")
    ax.set_xlabel("% –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
    ax.set_ylabel("LTV/CAC")
    ax.set_title("üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LTV/CAC", fontsize=14, pad=20)
    ax.legend()
    ax.grid(True, alpha=0.3)
    plt.tight_layout()
    return fig

def create_enhanced_kpi_cards(scenarios):
    data = scenarios["–ë–∞–∑–æ–≤—ã–π"]
    def get_kpi_class(metric, value):
        if metric == "ltv_cac":
            return "kpi-good" if value >= 3 else "kpi-warn" if value >= 1 else "kpi-bad"
        elif metric == "roi":
            return "kpi-good" if value >= 2 else "kpi-warn" if value >= 0 else "kpi-bad"
        elif metric == "payback":
            return "kpi-good" if value and value <= 12 else "kpi-warn" if value else "kpi-bad"
        elif metric == "confidence":
            return "kpi-good" if value >= 70 else "kpi-warn" if value >= 40 else "kpi-bad"
        return "kpi-neutral"
    kpi_html = f"""
    {ENHANCED_KPI_CSS}
    <div class="kpi-grid">
        <div class="kpi-card kpi-neutral">
            <div class="kpi-label">üíé LTV</div>
            <div class="kpi-value">{data['ltv']:,.0f} ‚ÇΩ</div>
            <div class="kpi-change">Lifetime Value</div>
        </div>
        <div class="kpi-card {get_kpi_class('ltv_cac', data['ltv_cac'])}">
            <div class="kpi-label">üìä LTV/CAC</div>
            <div class="kpi-value">{data['ltv_cac']:.2f}</div>
            <div class="kpi-change">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è</div>
        </div>
        <div class="kpi-card {get_kpi_class('payback', data['payback_month'])}">
            <div class="kpi-label">‚è±Ô∏è Payback</div>
            <div class="kpi-value">{'–ù–µ—Ç' if not data['payback_month'] else f"{data['payback_month']} –º–µ—Å."}</div>
            <div class="kpi-change">–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏</div>
        </div>
        <div class="kpi-card {get_kpi_class('roi', data['roi'])}">
            <div class="kpi-label">üìà ROI</div>
            <div class="kpi-value">{data['roi']:.1%}</div>
            <div class="kpi-change">–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</div>
        </div>
        <div class="kpi-card kpi-neutral">
            <div class="kpi-label">‚è≥ Lifetime</div>
            <div class="kpi-value">{data['customer_lifetime']:.1f} –º–µ—Å.</div>
            <div class="kpi-change">–°—Ä–µ–¥–Ω–∏–π lifecycle</div>
        </div>
        <div class="kpi-card kpi-neutral">
            <div class="kpi-label">üîÑ Retention</div>
            <div class="kpi-value">{data['annual_retention']:.1f}%</div>
            <div class="kpi-change">–ì–æ–¥–æ–≤–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ</div>
        </div>
        <div class="kpi-card {get_kpi_class('confidence', data['confidence_score'])}">
            <div class="kpi-label">üéØ Confidence</div>
            <div class="kpi-value">{data['confidence_score']:.0f}%</div>
            <div class="kpi-change">–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</div>
        </div>
    </div>
    """
    return kpi_html

def create_insights_panel(insights):
    insights_html = '<div class="insights-panel"><h4>üß† –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>'
    for insight in insights:
        insights_html += f"""
        <div class="insight-item">
            <div class="insight-icon">{insight['icon']}</div>
            <div class="insight-text">{insight['text']}</div>
        </div>
        """
    insights_html += '</div>'
    return insights_html

def generate_detailed_table(scenarios):
    all_data = []
    for scenario_name, data in scenarios.items():
        for i, month in enumerate(data['months'][:24]):
            all_data.append({
                '–°—Ü–µ–Ω–∞—Ä–∏–π': scenario_name,
                '–ú–µ—Å—è—Ü': month,
                '–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å (%)': round(data['survival_curve'][i] * 100, 2),
                '–ú–µ—Å—è—á–Ω—ã–π CF (‚ÇΩ)': round(data['monthly_cf'][i], 0),
                '–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π CF (‚ÇΩ)': round(data['cumulative_cf'][i], 0),
                'LTV –¥–æ –º–µ—Å—è—Ü–∞ (‚ÇΩ)': round(np.sum(data['monthly_cf'][:i+1]), 0)
            })
    df = pd.DataFrame(all_data)
    return df

def calculate_enhanced_ltv(avg_check, purchases_per_year, margin_pct, cac, 
                          monthly_churn_pct, discount_rate_pct, horizon_months, industry):
    params = {
        'avg_check': float(avg_check),
        'purchases_per_year': float(purchases_per_year), 
        'margin_pct': float(margin_pct),
        'cac': float(cac),
        'monthly_churn_pct': float(monthly_churn_pct),
        'discount_rate_pct': float(discount_rate_pct),
        'horizon_months': int(horizon_months)
    }
    warnings_list, errors = model.validate_inputs(params)
    if errors:
        error_msg = "<div style='color:#ff5f73;padding:16px;background:#2a1a1a;border-radius:8px;margin:8px 0'>"
        error_msg += "<h4>‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h4><ul>"
        for error in errors:
            error_msg += f"<li>{error}</li>"
        error_msg += "</ul></div>"
        return error_msg, None, None, None, pd.DataFrame()
    scenarios = model.calculate_scenarios(params)
    base_data = scenarios["–ë–∞–∑–æ–≤—ã–π"]
    insights = model.generate_insights(base_data, params, industry)
    kpi_html = create_enhanced_kpi_cards(scenarios)
    if warnings_list:
        warning_msg = "<div class='warning-panel'><h5>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h5><ul>"
        for warning in warnings_list:
            warning_msg += f"<li>{warning}</li>"
        warning_msg += "</ul></div>"
        kpi_html = warning_msg + kpi_html
    insights_html = create_insights_panel(insights)
    kpi_html += insights_html
    scenarios_chart = create_scenarios_chart(scenarios)
    survival_chart = create_survival_chart(scenarios)
    sensitivity_chart = create_sensitivity_chart(params)
    detailed_table = generate_detailed_table(scenarios)
    return kpi_html, scenarios_chart, survival_chart, sensitivity_chart, detailed_table

def generate_recommendations(avg_check, cac, margin_pct, monthly_churn_pct):
    recs = []
    if avg_check < cac:
        recs.append("üéØ **–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫**: –≤–Ω–µ–¥—Ä–∏—Ç—å –∞–ø—Å–µ–π–ª –∏ –∫—Ä–æ—Å—Å-—Å–µ–π–ª")
    if margin_pct < 30:
        recs.append("üí∞ **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å**: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    if monthly_churn_pct > 10:
        recs.append("üîí **–£–ª—É—á—à–∏—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏–µ**: –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, customer success")
    if cac > avg_check * 0.8:
        recs.append("üì¢ **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥**: —É–ª—É—á—à–∏—Ç—å targeting –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é")
    if not recs:
        recs.append("‚ú® **–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!** –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    html = "<div style='padding:12px'><ul>"
    for rec in recs:
        html += f"<li style='margin:8px 0;color:#222'>{rec}</li>"  # –¢—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    html += "</ul></div>"
    return html

with gr.Blocks(
    css="""
    .gradio-container { max-width: 1400px !important; }
    .panel { background: #1a1a1a; border-radius: 12px; padding: 16px; margin: 8px 0; }
    """,
    theme=gr.themes.Soft(primary_hue="amber", secondary_hue="gray"),
    title="ULTIMA ‚Äî Advanced LTV Analytics"
) as demo:
    gr.HTML(ENHANCED_HEADER_HTML)
    with gr.Row():
        with gr.Column(scale=1, elem_classes="panel"):
            gr.Markdown("## üéõÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏**")
            with gr.Accordion("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", open=True):
                avg_check = gr.Number(
                    label="üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)", value=20000, precision=0,
                    info="–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
                )
                purchases_per_year = gr.Number(
                    label="üõí –ü–æ–∫—É–ø–æ–∫ –≤ –≥–æ–¥", value=2.5, precision=1,
                    info="–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≥–æ–¥"
                )
                margin_pct = gr.Slider(
                    label="üìä –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)", value=50, minimum=0, maximum=100, step=1,
                    info="–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏"
                )
                cac = gr.Number(
                    label="üí∏ CAC (‚ÇΩ)", value=15000, precision=0,
                    info="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
                )
            with gr.Accordion("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–¥–µ—Ä–∂–∞–Ω–∏—è", open=True):
                monthly_churn_pct = gr.Slider(
                    label="üìâ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—Ç–æ–∫ (%)", value=8, minimum=0, maximum=50, step=0.5,
                    info="–ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∫–∏–¥–∞—é—â–∏—Ö –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü"
                )
                discount_rate_pct = gr.Slider(
                    label="üíπ –°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (%)", value=12, minimum=0, maximum=30, step=1,
                    info="–ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–∏—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"
                )
            with gr.Accordion("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", open=False):
                horizon_months = gr.Dropdown(
                    label="üìÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                    choices=[12, 24, 36, 48, 60], value=36,
                    info="–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ LTV –≤ –º–µ—Å—è—Ü–∞—Ö"
                )
                industry = gr.Dropdown(
                    label="üè¢ –û—Ç—Ä–∞—Å–ª—å (–¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤)",
                    choices=["SaaS", "E-commerce", "Marketplace", "Fintech"], value="SaaS",
                    info="–û—Ç—Ä–∞—Å–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"
                )
            calculate_btn = gr.Button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å LTV", variant="primary", size="lg")
        with gr.Column(scale=2):
            gr.Markdown("## üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**")
            kpi_output = gr.HTML()
            with gr.Tabs():
                with gr.TabItem("üìà Cash Flow Analysis"):
                    scenarios_plot = gr.Plot()
                with gr.TabItem("üë• Customer Retention"):
                    survival_plot = gr.Plot()
                with gr.TabItem("üéØ Sensitivity Analysis"):
                    sensitivity_plot = gr.Plot()
                with gr.TabItem("üìã Detailed Data"):
                    detailed_table = gr.Dataframe(
                        label="–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º",
                        wrap=True
                    )

    with gr.Row():
        with gr.Column():
            gr.Markdown("## üîç **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**")
            with gr.Accordion("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", open=False):
                recommendations_html = gr.HTML()
            with gr.Accordion("üìö –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–∞", open=False):
                gr.Markdown("""
                ### –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ LTV

                **LTV = Œ£(Monthly Margin √ó Survival Rate √ó Discount Factor)**

                –ì–¥–µ:
                - **Monthly Margin** = (–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ √ó –ü–æ–∫—É–ø–æ–∫ –≤ –≥–æ–¥ / 12) √ó –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                - **Survival Rate** = (1 - Monthly Churn)^(–º–µ—Å—è—Ü-1)
                - **Discount Factor** = (1 + Discount Rate)^(-–º–µ—Å—è—Ü/12)

                ### –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

                - **LTV/CAC ‚â• 3.0** ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                - **Payback ‚â§ 12 –º–µ—Å** ‚Äî –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–∏–∑–Ω–µ—Å–æ–≤
                - **Monthly Churn < 10%** ‚Äî –∑–¥–æ—Ä–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Ç–æ–∫–∞
                - **Customer Lifetime** = 1 / Monthly Churn Rate

                ### –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

                - **–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π**: +50% –æ—Ç—Ç–æ–∫–∞, -20% –º–∞—Ä–∂–∏, -10% —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
                - **–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π**: -30% –æ—Ç—Ç–æ–∫–∞, +20% –º–∞—Ä–∂–∏, +10% —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
                """)

    gr.HTML(f"""
    <div style="margin-top:24px;padding:20px;background:{ULTIMA_DARK};border-radius:12px;text-align:center">
        <img src="https://cdn-uploads.huggingface.co/production/uploads/68a5d644d41e00d772823934/bmu2UTnqh39vYO0wRV718.png" style="width:40px;height:40px;margin-right:12px;vertical-align:middle;" />
        <span style="color:{ULTIMA_GOLD};font-weight:600;font-size:18px;vertical-align:middle;">
            üöÄ ULTIMA Advanced LTV Analytics v2.0
        </span>
        <div style="color:#666;font-size:12px;margin-top:8px">
            –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è<br>
            –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ‚Ä¢ –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        </div>
    </div>
    """)

    calculate_btn.click(
        fn=calculate_enhanced_ltv,
        inputs=[
            avg_check, purchases_per_year, margin_pct, cac, 
            monthly_churn_pct, discount_rate_pct, horizon_months, industry
        ],
        outputs=[
            kpi_output, scenarios_plot, survival_plot, 
            sensitivity_plot, detailed_table
        ]
    )

    calculate_btn.click(
        fn=generate_recommendations,
        inputs=[avg_check, cac, margin_pct, monthly_churn_pct],
        outputs=[recommendations_html]
    )

if __name__ == "__main__":
    demo.launch(
        share=True,
        server_name="0.0.0.0",
        show_error=True,
        favicon_path=None,
        ssl_verify=False
    )
